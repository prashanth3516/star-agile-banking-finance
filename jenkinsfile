pipeline {
    agent any

    tools {
        // Install the Maven version configured as "M3" and add it to the path.
        maven "M2_HOME"
    }

    stages {
        stage('Build') {
            steps {
                // Get some code from a GitHub repository
                git 'https://github.com/prashanth3516/star-agile-banking-finance.git'

                // Run Maven on a Unix agent.
                sh "mvn -Dmaven.test.failure.ignore=true clean package"

            }        
        }
       stage('Generate Test Reports') {
           steps {
               publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: '/var/lib/jenkins/workspace/BankingProject/target/surefire-reports', reportFiles: 'index.html', reportName: 'HTML Report', reportTitles: '', useWrapperFileDirectly: true])
                    }
            }
       stage('Create Docker Image') {
           steps {
               sh 'docker build -t prashanth3516/banking-project-demo:3.0 .'
                    }
                }
       stage('Docker-Login') {
           steps {
               withCredentials([usernamePassword(credentialsId: 'Docker-login', passwordVariable: 'dockerpassword', usernameVariable: 'dockerlogin')]) { 
               sh 'docker login -u ${dockerlogin} -p ${dockerpassword}'
                                   }
                        }
                }
       stage('Push-Image') {
           steps {
               sh 'docker push prashanth3516/banking-project-demo:3.0'
                     }
                }
       stage('Config & Deployment') {
    steps {
        withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', 
                             credentialsId: 'AWS-ID', 
                             secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {

            // Ensure terraform-files directory exists
            sh '''
            if [ -d "terraform-files" ]; then
                echo "Directory terraform-files exists, proceeding..."
            else
                echo "Error: terraform-files directory not found!"
                exit 1
            fi
            '''

            // Move into the terraform-files directory and check for mykey123.pem
            dir('terraform-files') {
                sh '''
                # Check if mykey123.pem exists
                if [ -f "mykey123.pem" ]; then
                    sudo chmod 600 mykey123.pem
                    echo "Key file permissions set successfully."
                else
                    echo "Error: mykey123.pem file not found!"
                    exit 1
                fi

                # Initialize and run Terraform if everything is in place
                terraform init
                terraform validate
                terraform apply --auto-approve
                '''
            }
        }
    }
}

}
}
